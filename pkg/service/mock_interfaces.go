// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock_service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	model "github.com/axxonsoft-assignment/pkg/model"
	gomock "github.com/golang/mock/gomock"
)

// MockTasks is a mock of Tasks interface.
type MockTasks struct {
	ctrl     *gomock.Controller
	recorder *MockTasksMockRecorder
}

// MockTasksMockRecorder is the mock recorder for MockTasks.
type MockTasksMockRecorder struct {
	mock *MockTasks
}

// NewMockTasks creates a new mock instance.
func NewMockTasks(ctrl *gomock.Controller) *MockTasks {
	mock := &MockTasks{ctrl: ctrl}
	mock.recorder = &MockTasksMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTasks) EXPECT() *MockTasksMockRecorder {
	return m.recorder
}

// TasksCreate mocks base method.
func (m *MockTasks) TasksCreate(ctx context.Context, body model.Task) (*model.TasksResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TasksCreate", ctx, body)
	ret0, _ := ret[0].(*model.TasksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TasksCreate indicates an expected call of TasksCreate.
func (mr *MockTasksMockRecorder) TasksCreate(ctx, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TasksCreate", reflect.TypeOf((*MockTasks)(nil).TasksCreate), ctx, body)
}

// TasksGet mocks base method.
func (m *MockTasks) TasksGet(ctx context.Context, taskID string) (*model.TasksObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TasksGet", ctx, taskID)
	ret0, _ := ret[0].(*model.TasksObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TasksGet indicates an expected call of TasksGet.
func (mr *MockTasksMockRecorder) TasksGet(ctx, taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TasksGet", reflect.TypeOf((*MockTasks)(nil).TasksGet), ctx, taskID)
}
